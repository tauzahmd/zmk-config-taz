/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAIN  0
#define NUM   1
#define SYS   2

/ {
        behaviors {
                bhm: balanced_homerow_mods {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;    // <---[[moderate duration]]
                        quick-tap-ms = <0>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                };
                shm: shift_mod {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD";
                        #binding-cells = <2>;
                        bindings = <&kp>, <&kp>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
                shl: shift_mod_layer {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD_LAYER";
                        #binding-cells = <2>;
                        bindings = <&to>, <&kp>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------------------------------------------
// | N/A  |  ESC/Q    |  W       |  E      |  R        |    T    |   |  Y  |    U        |   I      |   O      |  P        | N/A  |
// | N/A  |  A/LCTRL  | S/LSHIFT |  D/LGUI |  F/LALT   |    G    |   |  H  |   J/RALT    |  K/RGUI  | L/RSHIFT |  ;/RCTRL  | N/A  |
// | N/A  |  Z        |  X       |  C      |  V        |    B    |   |  N  |   M         |  ,       |  .       |  /        | N/A  |
//                               | DEL/BKP |  TAB/NUM  | ENT/CAP |   | SPC |   SYS       |  ESC     |
                        bindings = <
   &none &mt ESC Q    &kp W         &kp E         &kp R         &kp T           &kp Y     &kp U        &kp I           &kp O         &kp P           &none
   &none &bhm LCTRL A &bhm LSHIFT S &bhm LGUI D   &bhm LALT F   &kp G           &kp H     &bhm RALT J  &bhm RGUI K     &bhm RSHIFT L &bhm RCTRL SEMI &none
   &none &kp Z        &kp X         &kp C         &kp V         &kp B           &kp N     &kp M        &kp COMMA       &kp DOT       &kp FSLH        &none
                                    &shm BSPC DEL &shl NUM TAB  &shm RET CAPS   &kp SPACE &to 2        &kp ESC
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------------------------------------------------
// | N/A  |    7     |   8      |   9       |     0      | HOME  |   |   N/A      |   PG_UP    |  UP     |  PG_DN   |   DEL   | N/A  |
// | N/A  |  4/LCTRL | 5/LSHIFT |   6/LGUI  |   LALT     |  END  |   | "\" / "|"  |  LEFT      |  DOWN   |  RIGHT   |   RCTRL | N/A  |
// | N/A  |   1      |  2       |   3       |    =/+     |  -/_  |   |     [/]    |    (/)     |   {/}   |   '/"    |    ~    | N/A  |
//                              |  RSHIFT   |    TAB     |  ENT  |   |    SPC     |    MAIN    |   ESC   |
                       bindings = <
   &none &kp 7        &kp 8         &kp 9         &kp 0         &kp HOME          &none           &kp PG_UP      &kp UP          &kp PG_DN  &kp DEL    &none
   &none &bhm LCTRL 4 &bhm LSHIFT 5 &bhm LGUI 6   &kp LALT      &kp END           &kp BSLH        &kp LEFT       &kp DOWN        &kp RIGHT  &kp RCTRL  &none
   &none &kp 1        &kp 2         &kp 3         &kp EQUAL     &kp MINUS         &shm LBKT RBKT  &shm LPAR RPAR &shm LBRC RBRC  &kp FSLH   &kp GRAVE  &none
                                    &kp RSHIFT    &kp TAB       &kp RET           &kp SPACE       &to 0          &none
                        >;
                };

        };
}; 
