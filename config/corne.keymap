/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAIN  0
#define NUM   1
#define SYS   2
#define NAV   3

/ {
    macros {
        cmb1: cmb1 {
            label = "ZM_CMB1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI &kp LCTRL>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI &kp LCTRL>
                ;
        };
        cmb2: cmb2 {
            label = "ZM_CMB2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT &kp LCTRL>
                , <&macro_pause_for_release>
                , <&macro_release &kp LSHFT &kp LCTRL>
                ;
        };
        cmb3: cmb3 {
            label = "ZM_CMB3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT &kp LCTRL>
                , <&macro_pause_for_release>
                , <&macro_release &kp LALT &kp LCTRL>
                ;
        };
        cut: cut {
            label = "ZM_CUT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp X>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTRL &kp X>
                ;
        };
        copy: copy {
            label = "ZM_COPY";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp C>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTRL &kp C>
                ;
        };
        paste: paste {
            label = "ZM_PASTE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp V>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTRL &kp V>
                ;
        };
    };
};
/ {
    combos {
        compatible = "zmk,combos";
        combo_nav {
            timeout-ms = <80>;
            key-positions = <25 38>;
            bindings = <&to NAV>;
        };
        combo_main {
            timeout-ms = <80>;
            key-positions = <1 38>;
            bindings = <&to MAIN>;
        };
        combo_num {
            timeout-ms = <80>;
            key-positions = <3 38>;
            bindings = <&to NUM>;
        };
        combo_sys {
            timeout-ms = <80>;
            key-positions = <5 38>;
            bindings = <&to SYS>;
        };
    };
};
&sk {
        release-after-ms = <2000>;
        /delete-property/ ignore-modifiers;
};
/ {
        behaviors {
                bhm: balanced_homerow_mods {
                        compatible = "zmk,behavior-hold-tap";
                        label = "HOMEROW_MODS";
                        #binding-cells = <2>;
                        tapping-term-ms = <300>;
                        quick-tap-ms = <150>;
                        flavor = "balanced";
                        bindings = <&kp>, <&kp>;
                };
                sm_bk_del: shift_mod_bkps_del {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD_BKPS_DEL";
                        #binding-cells = <0>;
                        bindings = <&kp BSPC>, <&kp DEL>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
                sm_bkt: shift_mod_bkt {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD_BKT";
                        #binding-cells = <0>;
                        bindings = <&kp LBKT>, <&kp RBKT>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
                sm_par: shift_mod_par {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD_PAR";
                        #binding-cells = <0>;
                        bindings = <&kp LPAR>, <&kp RPAR>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
                sm_brc: shift_mod_brc {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD_BRC";
                        #binding-cells = <0>;
                        bindings = <&kp LBRC>, <&kp RBRC>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
                sm_lgt: shift_mod_lgt {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD_LGT";
                        #binding-cells = <0>;
                        bindings = <&kp LT>, <&kp GT>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
                sm_rt_cap: shift_mod_ret_cap {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD_RET_CAP";
                        #binding-cells = <0>;
                        bindings = <&kp RET>, <&kp CAPS>;
                        mods = <(MOD_LSFT)>;
                };
                // This is no longer in use
                sl_no_tab: shift_mod_no_tab {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD_LAYER_NO_TAB";
                        #binding-cells = <0>;
                        bindings = <&to NUM>, <&kp TAB>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                        keep-mods = <(MOD_RSFT)>;
                };
                stk: sticky_s_c_a {
                        compatible = "zmk,behavior-hold-tap";
                        label = "STICKY_S_C_A";
                        #binding-cells = <2>;
                        tapping-term-ms = <150>;
                        quick-tap-ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&sk>, <&sk>;
                };
                td_mt: tap_dance_mod_tap {
                        compatible = "zmk,behavior-tap-dance";
                        label = "TAP_DANCE_MOD_TAP";
                        #binding-cells = <0>;
                        tapping-term-ms = <300>;
                        bindings = <&stk RALT RSHIFT>, <&sk RCTRL>;
                };
                // This is no longer in use
                sh_ma: shift_mod_main_layer {
                        compatible = "zmk,behavior-mod-morph";
                        label = "SHIFT_MOD_MAIN_LAYER";
                        #binding-cells = <0>;
                        bindings = <&to SYS>, <&kp MAIN>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                td_main: to_main_layer {
                        compatible = "zmk,behavior-hold-tap";
                        label = "TO_MAIN_LAYER";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&to>, <&kp>;
                };
                mod_st: mod_st {
                        compatible = "zmk,behavior-hold-tap";
                        label = "mod_sticky";
                        #binding-cells = <2>;
                        tapping-term-ms = <200>;
                        quick-tap-ms = <0>;
                        flavor = "tap-preferred";
                        bindings = <&kp>, <&sk>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------------------------------------------
// | N/A  |  ESC/Q    |  W       |  E      |  R        |    T    |   |  Y  |    U        |   I      |   O      |  P        | N/A  |
// | N/A  |  A/LCTRL  | S/LSHIFT |  D/LGUI |  F/LALT   | G/LCTRL |   |  H  |   J/RALT    |  K/RGUI  | L/RSHIFT |  ;/RCTRL  | N/A  |
// | N/A  |  Z        |  X       |  C      |  V        |    B    |   |  N  |   M         |  ,       |  .       |  /        | N/A  |
//                               |  TAB    |  DEL/BKP  | ENT/CAP |   | SPC |   sticky    |  ESC     |
                        bindings = <
   &none &mt ESC Q    &kp W         &kp E         &kp R         &kp T           &kp Y     &kp U        &kp I           &kp O         &kp P           &none
   &none &bhm LCTRL A &bhm LSHIFT S &bhm LGUI D   &bhm LALT F   &bhm LCTRL G    &kp H     &bhm RALT J  &bhm RGUI K     &bhm RSHIFT L &bhm RCTRL SEMI &none
   &none &kp Z        &kp X         &kp C         &kp V         &kp B           &kp N     &kp M        &kp COMMA       &kp DOT       &kp FSLH        &none
                                    &kp TAB       &sm_bk_del    &sm_rt_cap      &kp SPACE &td_mt       &kp ESC
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------------------------------------------------
// | N/A  |    7     |   8      |   9       |     0      |HOME/M |   |    ~       |   PG_UP    |  UP     |  PG_DN   |   '/"   | N/A  |
// | N/A  |  4/LCTRL | 5/LSHIFT |   6/LGUI  |   LALT     |  END  |   | "\" / "|"  |   LEFT     |  DOWN   |  RIGHT   |   ;     | N/A  |
// | N/A  |   1      |  2       |   3       |    =/+     |  -/_  |   |     [/]    |    (/)     |   {/}   |    .     |    /    | N/A  |
//                              |    TAB    |  DEL/BKP   |  ENT  |   |    SPC     |    sticky  |   </>   |
                       bindings = <
   &none &kp N7        &kp N8         &kp N9         &kp N0        &td_main 0 HOME   &kp GRAVE       &kp PG_UP      &kp UP       &kp PG_DN  &kp SQT    &none
   &none &bhm LCTRL N4 &bhm LSHIFT N5 &bhm LGUI N6   &kp LALT      &kp END           &kp BSLH        &kp LEFT       &kp DOWN     &kp RIGHT  &kp SEMI   &none
   &none &kp N1        &kp N2         &kp N3         &kp EQUAL     &kp MINUS         &sm_bkt         &sm_par        &sm_brc      &kp DOT    &kp FSLH   &none
                                      &kp TAB        &sm_bk_del    &kp RET           &kp SPACE       &td_mt         &sm_lgt
                        >;
                };

                raise_layer {
// -------------------------------------------------------------------------------------------------------------------------------
// | N/A  |     F1    |   F2     |   F3    |    F4      | F5/M  |   | F6     | F7       |  F8      |  F9      |   F10     | N/A  |
// | N/A  |   LCTRL   |  LSHIFT  |   LGUI  |    LALT    |INSERT |   | F11    | F12      |  PSCRN   |  INS     |   DEL     | N/A  |
// | N/A  |    BT1    |  BT2     |   BT3   |    BT4     |  BT5  |   | C_MUTE | C_VOL_UP | C_VOL_DN | C_BRI_UP | C_BRI_DN  | N/A  |
//                               |    TAB  |   DEL/BKP  |  ENT  |   | SPC    |  sticky  |  BTCLR   |
                        bindings = <
   &none  &kp F1       &kp F2       &kp F3       &kp F4       &td_main 0  F5    &kp F6     &kp F7        &kp F8        &kp F9       &kp F10       &none
   &none  &kp LCTRL    &kp LSHFT    &kp LGUI     &kp LALT     &kp INS           &kp F11    &kp F12       &kp PSCRN     &kp INS      &kp DEL       &none
   &none  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4      &kp C_MUTE &kp C_VOL_UP  &kp C_VOL_DN  &kp C_BRI_UP &kp C_BRI_DN  &none
                                    &kp TAB      &sm_bk_del   &kp RET           &kp SPACE  &td_mt        &bt BT_CLR
                        >;
                };
                nav_layer {
// -------------------------------------------------------------------------------------------------------------------------------
// | N/A  |  CMB1  |  SHFT  |  UP    | ALT     | HOME/M |       | None  | None  | None  | None  | None  | None  |
// | N/A  |  CMB2  |  LEFT  |  DOWN  | RIGHT   | END    |       | None  | None  | None  | None  | None  | None  |
// | N/A  |  CMB3  |  CUT   | COPY   | PASTE   | WIN    |       | None  | None  | None  | None  | None  | None  |
//                          |  TAB   | DEL/BKP |  ENT   |       | None  | None  | None  |
                        bindings = <
   &none  &cmb1  &mod_st LSHFT LSHFT  &kp UP       &mod_st LALT LALT   &td_main 0 HOME         &none  &none  &none  &none  &none  &none
   &none  &cmb2  &kp LEFT             &kp DOWN     &kp RIGHT           &kp END                 &none  &none  &none  &none  &none  &none
   &none  &cmb3  &cut                 &copy        &paste              &mod_st LGUI LGUI       &none  &none  &none  &none  &none  &none
                                      &kp TAB      &sm_bk_del          &kp RET                 &none  &none  &none  
                        >;
                };

        };
};

// Combo 1 Win + Ctrl
// Combo 2 Shit + Ctrl
// Combo 3 Alt + Ctrl
